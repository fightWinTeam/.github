# This workflow will build source code, build docker image,push docker image to JFrog Artifactory, pull image to openshift by uses actions.

name: deploy-openshift-dev

on:
  workflow_dispatch:
    inputs:
      JAR_VERSION:
        description: "jar version"
        required: true
        type: string
        default: 0.0.1-SNAPSHOT
      REGISTRY_REPOS_TAG_VERSION:
         description: "registry tag version"
         required: true
         type: string
      REGISTRY_USER:
         description: "Artifactory username"
         required: true
         type: string
      REGISTRY_PASSWORD:
         description: "Artifactory password"
         required: true
         type: string
      OPENSHIFT_TOKEN:
        description: "openshift token"
        required: true
        type: string
      OPENSHIFT_APP_NAME:
        description: "openshift application name"
        required: true
        type: string
      OPENSHIFT_NAMESPACE:
        description: "openshift namespace"
        required: true
        type: string
        default: idf-corp-vs-dev-1
        
  workflow_call:
    inputs:
      JAR_VERSION:
        description: "jar version"
        required: true
        type: string
        default: 0.0.1-SNAPSHOT
      REGISTRY_REPOS_TAG_VERSION:
         description: "registry tag version"
         required: true
         type: string
      REGISTRY_USER:
         description: "Artifactory username"
         required: true
         type: string
      REGISTRY_PASSWORD:
         description: "Artifactory password"
         required: true
         type: string
      OPENSHIFT_TOKEN:
        description: "openshift token"
        required: true
        type: string
      OPENSHIFT_APP_NAME:
        description: "openshift application name"
        required: true
        type: string
      OPENSHIFT_NAMESPACE:
        description: "openshift namespace"
        required: true
        type: string
        default: idf-corp-vs-dev-1

jobs:
  deploy-openshift-dev-job:

    runs-on: [self-hosted]
    steps:
    
    #################build source code workflow#########################
      - name: uppercase
        id: uppercase
        run: |
          GITHUB_USER_ACCOUNT=$(eval echo $GITHUB_ACTOR | tr '[a-z]' '[A-Z]')
          echo "::set-output name=uppercase_account::$(echo $GITHUB_USER_ACCOUNT)"
          echo "::set-output name=workspace_trim::$(eval echo ${{ github.workspace }})"
      
      - name: Checkout source code
        id: build-checkout-source-code
        uses: actions/checkout@v2
        with:
          path: ${{ steps.uppercase.outputs.uppercase_account }}
      
      - name: Checkout source code result
        id: build-checkout-source-code-result
        if: always() && (steps.build-checkout-source-code.outcome != 'skipped')
        run: |
          if [[ '${{ steps.build-checkout-source-code.outcome }}' == 'success' ]]
            then 
              echo 'Checkout source code success.'
              echo 'The address of checkout is ${{ github.workspace }}/${{ steps.uppercase.outputs.uppercase_account }}.'
              echo 'Next step will build source code.'
            else 
                echo 'Checkout source code failure.'
          fi
           
      - name: run outputs
        id: env
        run: |
          # The file owner has read, write, and execute permissions.The owner's group and other users have read-only permission.
          chmod 744 ${{ github.workspace }}/${{ steps.uppercase.outputs.uppercase_account }}/.github/script/run.sh
          ${{ github.workspace }}/${{ steps.uppercase.outputs.uppercase_account }}/.github/script/run.sh ${{ github.workspace }}/${{ steps.uppercase.outputs.uppercase_account }} deploy-openshift-dev
        shell: bash
    
      - name: Build source code and Publish to JFrog Artifactory
        id: build-publish-jFrog-artifactory 
        run: |
          cd ${{ steps.env.outputs.USER_WORK_SPACE_PATH }}
          #modify maven package version
          mvn versions:set -DnewVersion=${{ github.event.inputs.JAR_VERSION }} -s settings.xml
          #maven package and deploy
          mvn clean deploy -U -s settings.xml
      
      - name: Build source code and Publish to JFrog Artifactory result
        id: build-publish-jFrog-artifactory-result
        if: always() && (steps.build-publish-jFrog-artifactory.outcome != 'skipped')
        run: |
          if [[ '${{ steps.build-publish-jFrog-artifactory.outcome }}' == 'success' ]]
            then 
              echo 'Maven package success and Publish jar to jFrog artifactory success.'
              echo 'The jar address of build is ${{ steps.env.outputs.USER_WORK_SPACE_PATH }}/${{ steps.env.outputs.JAR_STORE_LOCAL_RELATIVE_PATH }}/${{ steps.env.outputs.JAR_NAME }}-${{ github.event.inputs.JAR_VERSION }}.jar'.
              echo 'The jar is deployed to JFrog Artifactory.The adderss is ${{ steps.env.outputs.JAR_REMOTE_STORAGE_PATH }}/${{ steps.env.outputs.JAR_NAME }}/${{ github.event.inputs.JAR_VERSION }}.'
              echo 'Next step will build docker image.'
            else 
              cd ${{ github.workspace }}/${{ steps.uppercase.outputs.uppercase_account }}
              if [[ -d ${{ steps.env.outputs.JAR_STORE_LOCAL_RELATIVE_PATH }} ]] 
                then
                  jarPath=${{ steps.env.outputs.JAR_STORE_LOCAL_RELATIVE_PATH }}/${{ steps.env.outputs.JAR_NAME }}-${{ github.event.inputs.JAR_VERSION }}.jar
                  if [[ -e $jarPath ]] 
                    then
                      echo 'Publish jar to jFrog artifactory failure.'
                    else
                     echo 'Maven package failure.'
                  fi
                else
                 echo 'Maven package failure.'
              fi
          fi  
          
      ##################build docker image workflow#########################
      - name: Download jar from artifactory
        id: build-download-jar-from-artifactory
        run: |
           cd ${{ steps.env.outputs.USER_WORK_SPACE_PATH }}
           JAR_PUSH_VERSION=${{ github.event.inputs.JAR_VERSION }}
           MAVEN_GROUP_ID=${{ steps.env.outputs.MAVEN_GROUP_ID }}
           TEMP_JAR_FOLDER=tempJar`date +%y%m%d%H%M%S`
           JAR_TYPE_UPPER=$(echo ${{ github.event.inputs.JAR_VERSION }} | tr '[a-z]' '[A-Z]')

           #judge is or not snapshot jar version
           if [[ $JAR_TYPE_UPPER != *SNAPSHOT* ]]
           then
              #maven clear download repository jar
              mvn dependency:purge-local-repository -DmanualInclude="$MAVEN_GROUP_ID:${{ steps.env.outputs.JAR_NAME }}" -s settings.xml
           fi
         
           #maven download remote jar to local respository
           mvn dependency:get -Dartifact=$MAVEN_GROUP_ID:${{ steps.env.outputs.JAR_NAME }}:$JAR_PUSH_VERSION -Dtransitive=false -s settings.xml
           #maven copy download respository jar to output directory
           mvn dependency:copy -Dartifact=$MAVEN_GROUP_ID:${{ steps.env.outputs.JAR_NAME }}:$JAR_PUSH_VERSION  -DoutputDirectory=./$TEMP_JAR_FOLDER -s settings.xml
           #maven clear download repository jar
           mvn dependency:purge-local-repository -DmanualInclude="$MAVEN_GROUP_ID:${{ steps.env.outputs.JAR_NAME }}" -s settings.xml
           #download remote jar move to target  directory
           mv $TEMP_JAR_FOLDER/*.jar ${{ steps.env.outputs.JAR_STORE_LOCAL_RELATIVE_PATH }}/${{ steps.env.outputs.JAR_NAME }}.jar
    
      - name: Download jar from artifactory result
        if: always()
        run: |
           if [[ '${{ steps.build-download-jar-from-artifactory.outcome }}' == 'success' ]]
            then 
              echo 'Download jar from artifactory success.'
            else 
              echo 'Download jar from artifactory failure.'
           fi
    
      - name: Build docker image
        id: build-docker-image
        run: |
           checkImageId=$(docker images -f reference="${{ steps.env.outputs.REGISTRY_IMAGE_PATH }}:${{ github.event.inputs.REGISTRY_REPOS_TAG_VERSION }}" -q)
           if [ ! -z $checkImageId ]
              then
                 echo "::set-output name=BUILD_RESULT_FILE::''"
                 echo "ERROR: ${{ steps.env.outputs.REGISTRY_IMAGE_PATH }}:${{ github.event.inputs.REGISTRY_REPOS_TAG_VERSION }} existed, please modify image information."
                 exit 1
           fi
         
           cd ${{ steps.env.outputs.USER_WORK_SPACE_PATH }}
           github_sha=${{ github.sha }}
           buildResultFile=buildResult`date +%y%m%d%H%M%S`.txt
           echo "::set-output name=GITHUB_REPOSITORY::$(echo github_repository=$GITHUB_REPOSITORY)"
           echo "::set-output name=GITHUB_REF_NAME::$(echo github_branch=$GITHUB_REF_NAME)"
           echo "::set-output name=IMAGE_LABEL::$(echo github_commit_id=$github_sha)"
           echo "::set-output name=BUILD_RESULT_FILE::$(echo $buildResultFile)"
           docker build --no-cache --label="github_repository=$GITHUB_REPOSITORY" --label="github_branch=$GITHUB_REF_NAME" --label="github_commit_id=$github_sha" -t '${{ steps.env.outputs.REGISTRY_IMAGE_PATH }}:${{ github.event.inputs.REGISTRY_REPOS_TAG_VERSION }}' -f Dockerfile . >& $buildResultFile
           cat $buildResultFile
         
      - name: Build docker image result
        if: always() && (steps.build-docker-image.outcome != 'skipped')
        run: |
           if [[ '${{ steps.build-docker-image.outcome }}' == 'success' ]]
            then 
              echo 'Build docker image success.'
              echo "The Label of docker image is: ${{ steps.build-docker-image.outputs.GITHUB_REPOSITORY }}, ${{ steps.build-docker-image.outputs.GITHUB_REF_NAME }}, ${{ steps.build-docker-image.outputs.IMAGE_LABEL }}."
              echo 'The details of docker image by below:'
              docker image ls -f reference="${{ steps.env.outputs.REGISTRY_IMAGE_PATH }}:${{ github.event.inputs.REGISTRY_REPOS_TAG_VERSION }}"
              echo 'Next step will push docker image to jfrog artifactory .'
            else 
              if [ -z ${{ steps.build-docker-image.outputs.BUILD_RESULT_FILE }} ]
                 then
                    echo 'Build docker image failure.' 
                 else
                    cd ${{ steps.env.outputs.USER_WORK_SPACE_PATH }}
                    cat ${{ steps.build-docker-image.outputs.BUILD_RESULT_FILE }}
                    imageId=$(eval echo $(echo $(cat ${{ steps.build-docker-image.outputs.BUILD_RESULT_FILE }} | grep '>' | tail -n 1) | sed -e 's/--->//g'))
                    if [ ! -z $imageId ]
                       then
                          echo 'Build docker image failure, will remove abnormal image.' 
                          docker rmi $imageId
                          cat /dev/null > ${{ steps.build-docker-image.outputs.BUILD_RESULT_FILE }}
                       else
                          echo 'Build docker image failure.' 
                    fi
              fi
           fi
        
      - name: Docker login JFrog Artifactory
        id: push-docker-login-jfrog-artifactory
        run: echo '${{ github.event.inputs.REGISTRY_PASSWORD }}' | docker login -u '${{ github.event.inputs.REGISTRY_USER }}' --password-stdin https://${{ steps.env.outputs.REGISTRY_URL }}
      
      - name: Docker login JFrog Artifactory result
        if: always()
        run: |
          if [[ '${{ steps.push-docker-login-jfrog-artifactory.outcome }}' == 'success' ]]
            then 
              echo 'Login jfrog artifactory success.'
            else 
              echo 'Login jfrog artifactory failure.'
          fi
      
      - name: Push to JFrog Artifactory
        id: push-jfrog-artifactory
        run: docker push ${{ steps.env.outputs.REGISTRY_IMAGE_PATH }}:${{ github.event.inputs.REGISTRY_REPOS_TAG_VERSION }}
    
      - name: Push to JFrog Artifactory result
        id: push-jfrog-artifactory-result
        if: always() && (steps.push-jfrog-artifactory.outcome != 'skipped')
        run: |
          if [[ '${{ steps.push-jfrog-artifactory.outcome }}' == 'success' ]]
            then 
              echo 'Push docker image to jfrog artifactory success.'
              echo 'The address of jfrog artifactory image is: ${{ steps.env.outputs.REGISTRY_IMAGE_PATH }}/${{ github.event.inputs.REGISTRY_REPOS_TAG_VERSION }}'
              echo 'Next step will deploy jfrog artifactory image to openshift'
              echo "::set-output name=REGISTRY_URL::${{ steps.env.outputs.REGISTRY_URL }}"
              echo "::set-output name=REGISTRY_REPOSITORY::${{ steps.env.outputs.REGISTRY_REPOSITORY }}"
              echo "::set-output name=REGISTRY_REPOS_TAG_NAME::${{ steps.env.outputs.REGISTRY_REPOS_TAG_NAME }}"
              echo "::set-output name=REGISTRY_REPOS_TAG_VERSION::${{ github.event.inputs.REGISTRY_REPOS_TAG_VERSION }}"
              imageTagPath=${{ steps.env.outputs.REGISTRY_IMAGE_PATH }}:${{ github.event.inputs.REGISTRY_REPOS_TAG_VERSION }};
              echo ::set-output name=imageResult::$(docker images -q $imageTagPath 2> /dev/null)
            else 
              echo 'Push docker image to jfrog artifactory failure.'
          fi
      
      - name: Remove Docker temp image
        id: remove-docker-temp-image
        if: steps.push-jfrog-artifactory-result.outputs.REGISTRY_URL != null
          && steps.push-jfrog-artifactory-result.outputs.REGISTRY_URL != ''
          && steps.push-jfrog-artifactory-result.outputs.REGISTRY_REPOSITORY!=null 
          && steps.push-jfrog-artifactory-result.outputs.REGISTRY_REPOSITORY!='' 
          && steps.push-jfrog-artifactory-result.outputs.REGISTRY_REPOS_TAG_NAME!=null 
          && steps.push-jfrog-artifactory-result.outputs.REGISTRY_REPOS_TAG_NAME!='' 
          && steps.push-jfrog-artifactory-result.outputs.REGISTRY_REPOS_TAG_VERSION!=null
          && steps.push-jfrog-artifactory-result.outputs.REGISTRY_REPOS_TAG_VERSION!=''
          && steps.push-jfrog-artifactory-result.outputs.imageResult!=null
          && steps.push-jfrog-artifactory-result.outputs.imageResult!=''
        run: docker rmi ${{ steps.push-jfrog-artifactory-result.outputs.REGISTRY_URL }}/${{ steps.push-jfrog-artifactory-result.outputs.REGISTRY_REPOSITORY }}/${{ steps.push-jfrog-artifactory-result.outputs.REGISTRY_REPOS_TAG_NAME }}:${{ steps.push-jfrog-artifactory-result.outputs.REGISTRY_REPOS_TAG_VERSION }}

      - name: Remove Docker temp image result
        if: always() && (steps.remove-docker-temp-image.outcome != 'skipped')
        run: |
          if [[ '${{ steps.remove-docker-temp-image.outcome }}' == 'success' ]]
            then 
              echo 'Remove docker temp image success.'
            else 
              echo 'Remove docker temp image failure.'
          fi
          
      ##################pull image openshift workflow#########################   
      - name: Login OpenShift
        id: pull-login-openshift
        run: oc login --token=${{ github.event.inputs.OPENSHIFT_TOKEN }} --server=${{ steps.env.outputs.OPENSHIFT_SERVER }}
        
      - name: Login OpenShift result
        if: always()
        run: |
          if [[ '${{ steps.pull-login-openshift.outcome }}' == 'success' ]]
            then 
              echo 'Login OpenShift success.'
            else 
              echo 'Login OpenShift failure.'
          fi
      - name: delete old app
        id: pull-delete-openshift-old-application
        run: oc delete all -l app='${{ github.event.inputs.OPENSHIFT_APP_NAME }}'
        
      - name: delete old app result
        if: always() && (steps.pull-delete-openshift-old-application.outcome != 'skipped')
        run: |
          if [[ '${{ steps.pull-delete-openshift-old-application.outcome }}' == 'success' ]]
            then 
              echo 'Delete OpenShift old application success.'
            else 
              echo 'Delete OpenShift old application failure.'
          fi
          
      - name: create APP
        id: pull-create-openshift-application
        run: oc new-app --name=${{ github.event.inputs.OPENSHIFT_APP_NAME }} --docker-image='${{ steps.env.outputs.REGISTRY_IMAGE_PATH }}:${{ github.event.inputs.REGISTRY_REPOS_TAG_VERSION }}' -n ${{ github.event.inputs.OPENSHIFT_NAMESPACE }}
        
      - name: create APP result
        if: always() && (steps.pull-create-openshift-application.outcome != 'skipped')
        run: |
          if [[ '${{ steps.pull-create-openshift-application.outcome }}' == 'success' ]]
            then 
              echo 'OpenShift create application step success.'
              oc get deployment/${{ github.event.inputs.OPENSHIFT_APP_NAME }}
            else 
              echo 'OpenShift create application step failure.'
          fi
      
      - name: create PVC
        id: pull-create-pvc
        run: oc apply -f ${{ steps.env.outputs.USER_WORK_SPACE_PATH }}/${{ steps.env.outputs.PVC_TEMPLATE_PATH }}
        
      - name: create PVC result
        if: always() && (steps.pull-create-pvc.outcome != 'skipped')
        run: |
          if [[ '${{ steps.pull-create-pvc.outcome }}' == 'success' ]]
            then 
              echo 'Create PVC step success.'
            else 
              echo 'Create PVC step failure.'
          fi
        
      - name: bound PVC
        id: pull-bound-pvc
        run: |
          pvcDetail=$(oc get pvc ${{ steps.env.outputs.PVC_CLAIM_NAME }})
          if [[ pvcDetail != '' ]]
            then
              oc set volumes deployment/${{ github.event.inputs.OPENSHIFT_APP_NAME }} --add --mount-path=${{ steps.env.outputs.PV_LOG_MOUNT_PATH }} -t pvc --claim-name=${{ steps.env.outputs.PVC_CLAIM_NAME }}
          fi
          
      - name: bound PVC result
        if: always() && (steps.pull-bound-pvc.outcome != 'skipped')
        run: |
          if [[ '${{ steps.pull-bound-pvc.outcome }}' == 'success' ]]
            then 
              echo 'Openshift application bound PVC step success.'
              oc set volumes deployment/${{ github.event.inputs.OPENSHIFT_APP_NAME }}
              echo "All services should be up and running now."
              echo "Exposing artifactory route to outside."
              oc expose svc/${{ github.event.inputs.OPENSHIFT_APP_NAME }}
              echo "Helloworld artifactory is up and running."
              echo "Access Helloworld by follow url:"
              oc get route ${{ github.event.inputs.OPENSHIFT_APP_NAME }}
            else 
              echo 'Openshift application bound PVC step failure.'
          fi
  
      ##################remove useless folder workflow#########################   
      - name: Remove useless folder
        run: |
          if [ ! -z ${{ steps.uppercase.outputs.workspace_trim }} -a ! -z ${{ steps.uppercase.outputs.uppercase_account }} ]
             then
                echo "workspace: ${{ steps.uppercase.outputs.workspace_trim }}"
                echo "user_account: ${{ steps.uppercase.outputs.uppercase_account }}"
                if [ -d ${{ steps.uppercase.outputs.workspace_trim }} ]
                  then
                    if [ ${{ steps.uppercase.outputs.workspace_trim }} != '/' ]
                      then
                        if [ -d ${{ steps.uppercase.outputs.workspace_trim }}/${{ steps.uppercase.outputs.uppercase_account }} ]
                          then
                            cd ${{ steps.uppercase.outputs.workspace_trim }}
                            if [ -d ${{ steps.uppercase.outputs.uppercase_account }} ]
                              then
                                regularExpression='^[A-Z]'
                                if echo ${{ steps.uppercase.outputs.uppercase_account }} | grep $regularExpression
                                  then
                                    echo "Description of remove folder: remove ${{ steps.uppercase.outputs.workspace_trim }}/${{ steps.uppercase.outputs.uppercase_account }} success."
                                    #rm -rf ${{ steps.uppercase.outputs.uppercase_account }}
                                  else
                                    echo "ERROR : user_account is ${{ steps.uppercase.outputs.uppercase_account }}, not start with [A-Z] folder, you can not to remove."
                                    exit 1
                                fi
                              else
                                echo "ERROR : user_account is ${{ steps.uppercase.outputs.uppercase_account }}, folder not exist."
                                exit 1
                            fi
                          else
                            echo "ERROR : ${{ steps.uppercase.outputs.workspace_trim }}/${{ steps.uppercase.outputs.uppercase_account }} folder is not exist."
                            exit 1
                        fi
                      else
                        echo "ERROR : workspace is ${{ steps.uppercase.outputs.workspace_trim }}, root folder, you don't have permission to remove."
                        exit 1
                    fi
                  else
                    echo "ERROR : workspace is ${{ steps.uppercase.outputs.workspace_trim }}, folder not exist."
                    exit 1
                fi
             else 
                if [ -z ${{ steps.uppercase.outputs.workspace_trim }} ]
                    then
                      echo "ERROR : workspace is empty string."
                    else
                      if [ -z ${{ steps.uppercase.outputs.uppercase_account }} ] 
                        then
                          echo "ERROR : user_account is empty string."
                      fi
                fi
                exit 1
          fi
       
