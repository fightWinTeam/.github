#Use Artifactory Build file to Build docker image
name: build-docker-image

on:
  
  workflow_dispatch:
    inputs:
      JAR_VERSION:
        description: "jar version"
        required: true
        type: string
        default: 0.0.1-SNAPSHOT
      REGISTRY_REPOS_TAG_VERSION:
         description: "registry tag version"
         required: true
         type: string
  
  workflow_call:
    inputs:
      JAR_VERSION:
        description: "jar version"
        required: true
        type: string
        default: 0.0.1-SNAPSHOT
      REGISTRY_REPOS_TAG_VERSION:
        required: true
        type: string

jobs:
  build-docker-image-job:
    runs-on: [self-hosted]
    steps:
    
    - name: uppercase
      id: uppercase
      run: |
        GITHUB_USER_ACCOUNT=$(echo $GITHUB_ACTOR | tr '[a-z]' '[A-Z]')
        echo "::set-output name=uppercase_account::$(echo $GITHUB_USER_ACCOUNT)"
    
    - name: run outputs
      id: env
      run: |
        # The file owner has read, write, and execute permissions.The owner's group and other users have read-only permission.
        chmod 744 ${{ github.workspace }}/${{ steps.uppercase.outputs.uppercase_account }}/.github/script/run.sh
        ${{ github.workspace }}/${{ steps.uppercase.outputs.uppercase_account }}/.github/script/run.sh ${{ github.workspace }}/${{ steps.uppercase.outputs.uppercase_account }} build-docker-image
      shell: bash
    
    - name: Download jar from artifactory
      id: build-download-jar-from-artifactory
      run: |
         cd ${{ steps.env.outputs.USER_WORK_SPACE_PATH }}
         JAR_PUSH_VERSION=${{ github.event.inputs.JAR_VERSION }}
         MAVEN_GROUP_ID=${{ steps.env.outputs.MAVEN_GROUP_ID }}
         TEMP_JAR_FOLDER=tempJar`date +%y%m%d%H%M%S`
         JAR_TYPE_UPPER=$(echo ${{ github.event.inputs.JAR_VERSION }} | tr '[a-z]' '[A-Z]')
         
         #judge is or not snapshot jar version
         if [[ $JAR_TYPE_UPPER != *SNAPSHOT* ]]
         then
            #maven clear download repository jar
            mvn dependency:purge-local-repository -DmanualInclude="$MAVEN_GROUP_ID:${{ steps.env.outputs.JAR_NAME }}" -s settings.xml
         fi
         
         #maven download remote jar to local respository
         mvn dependency:get -U -Dartifact=$MAVEN_GROUP_ID:${{ steps.env.outputs.JAR_NAME }}:$JAR_PUSH_VERSION -Dtransitive=false -s settings.xml
         #maven copy download respository jar to output directory
         mvn dependency:copy -Dartifact=$MAVEN_GROUP_ID:${{ steps.env.outputs.JAR_NAME }}:$JAR_PUSH_VERSION  -DoutputDirectory=./$TEMP_JAR_FOLDER -s settings.xml
         #maven clear download repository jar
         mvn dependency:purge-local-repository -DmanualInclude="$MAVEN_GROUP_ID:${{ steps.env.outputs.JAR_NAME }}" -s settings.xml
         #download remote jar move to target  directory
         mv $TEMP_JAR_FOLDER/*.jar ${{ steps.env.outputs.JAR_STORE_LOCAL_RELATIVE_PATH }}/${{ steps.env.outputs.JAR_NAME }}.jar
    
    - name: Download jar from artifactory result
      if: always()
      run: |
         if [[ '${{ steps.build-download-jar-from-artifactory.outcome }}' == 'success' ]]
          then 
            echo 'Download jar from artifactory success.'
          else 
            echo 'Download jar from artifactory failure.'
         fi
    
    - name: Build docker image
      id: build-docker-image
      run: |
         checkImageId=$(docker images -f reference="${{ steps.env.outputs.REGISTRY_IMAGE_PATH }}:${{ github.event.inputs.REGISTRY_REPOS_TAG_VERSION }}" -q)
         if [ ! -z $checkImageId ]
            then
               echo "::set-output name=BUILD_RESULT_FILE::''"
               echo "ERROR: ${{ steps.env.outputs.REGISTRY_IMAGE_PATH }}:${{ github.event.inputs.REGISTRY_REPOS_TAG_VERSION }} existed, please modify image information."
               exit 1
         fi
         
         cd ${{ steps.env.outputs.USER_WORK_SPACE_PATH }}
         github_sha=${{ github.sha }}
         buildResultFile=buildResult`date +%y%m%d%H%M%S`.txt
         echo "::set-output name=GITHUB_REPOSITORY::$(echo github_repository=$GITHUB_REPOSITORY)"
         echo "::set-output name=GITHUB_REF_NAME::$(echo github_branch=$GITHUB_REF_NAME)"
         echo "::set-output name=IMAGE_LABEL::$(echo github_commit_id=$github_sha)"
         echo "::set-output name=BUILD_RESULT_FILE::$(echo $buildResultFile)"
         docker build --no-cache --label="github_repository=$GITHUB_REPOSITORY" --label="github_branch=$GITHUB_REF_NAME" --label="github_commit_id=$github_sha" -t '${{ steps.env.outputs.REGISTRY_IMAGE_PATH }}:${{ github.event.inputs.REGISTRY_REPOS_TAG_VERSION }}' -f Dockerfile . >& $buildResultFile
         cat $buildResultFile
    - name: Build docker image result
      if: always() && (steps.build-docker-image.outcome != 'skipped')
      run: |
         if [[ '${{ steps.build-docker-image.outcome }}' == 'success' ]]
          then 
            echo 'Build docker image success.'
            echo "The Label of docker image is: ${{ steps.build-docker-image.outputs.GITHUB_REPOSITORY }}, ${{ steps.build-docker-image.outputs.GITHUB_REF_NAME }}, ${{ steps.build-docker-image.outputs.IMAGE_LABEL }}."
            echo 'The details of docker image by below:'
            docker image ls -f reference="${{ steps.env.outputs.REGISTRY_IMAGE_PATH }}:${{ github.event.inputs.REGISTRY_REPOS_TAG_VERSION }}"
            echo 'Next step will push docker image to jfrog artifactory .'
          else 
            if [ -z ${{ steps.build-docker-image.outputs.BUILD_RESULT_FILE }} ]
               then
                  echo 'Build docker image failure.' 
               else
                  cd ${{ steps.env.outputs.USER_WORK_SPACE_PATH }}
                  cat ${{ steps.build-docker-image.outputs.BUILD_RESULT_FILE }}
                  imageId=$(eval echo $(echo $(cat ${{ steps.build-docker-image.outputs.BUILD_RESULT_FILE }} | grep '>' | tail -n 1) | sed -e 's/--->//g'))

                  if [ ! -z $imageId ]
                     then
                        echo 'Build docker image failure, will remove abnormal image.' 
                        docker rmi $imageId
                        cat /dev/null > ${{ steps.build-docker-image.outputs.BUILD_RESULT_FILE }}
                     else
                        echo 'Build docker image failure.' 
                  fi
            fi
         fi
