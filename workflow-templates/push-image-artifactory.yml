# This workflow will push docker image to jfrog artifactory
name: push-image-artifactory
on:
  workflow_dispatch:
    inputs:
      REGISTRY_USER:
         description: "Artifactory username"
         required: true
         type: string
      REGISTRY_PASSWORD:
         description: "Artifactory password"
         required: true
         type: string
      REGISTRY_REPOS_TAG_VERSION:
         description: "registry tag version"
         required: true
         type: string
  workflow_call:
    inputs:
      REGISTRY_USER:
         description: "Artifactory username"
         required: true
         type: string
      REGISTRY_PASSWORD:
         description: "Artifactory password"
         required: true
         type: string
      REGISTRY_REPOS_TAG_VERSION:
         description: "registry tag version"
         required: true
         type: string
      
jobs:
  push-image-artifactory-job:
    runs-on: [self-hosted]
    steps:
    
    - name: uppercase
      id: uppercase
      run: |
        GITHUB_USER_ACCOUNT=$(echo $GITHUB_ACTOR | tr '[a-z]' '[A-Z]')
        echo "::set-output name=uppercase_account::$(echo $GITHUB_USER_ACCOUNT)"
    
    - name: run outputs
      id: env
      run: |
        # The file owner has read, write, and execute permissions.The owner's group and other users have read-only permission.
        chmod 744 ${{ github.workspace }}/${{ steps.uppercase.outputs.uppercase_account }}/.github/script/run.sh
        ${{ github.workspace }}/${{ steps.uppercase.outputs.uppercase_account }}/.github/script/run.sh ${{ github.workspace }}/${{ steps.uppercase.outputs.uppercase_account }} push-image-artifactory
      shell: bash
    
    - name: Docker login JFrog Artifactory
      id: push-docker-login-jfrog-artifactory
      run: echo '${{ github.event.inputs.REGISTRY_PASSWORD }}' | docker login -u '${{ github.event.inputs.REGISTRY_USER }}' --password-stdin https://${{ steps.env.outputs.REGISTRY_URL }}
      
    - name: Docker login JFrog Artifactory result
      if: always()
      run: |
        if [[ '${{ steps.push-docker-login-jfrog-artifactory.outcome }}' == 'success' ]]
          then 
            echo 'Login jfrog artifactory success.'
          else 
            echo 'Login jfrog artifactory failure.'
        fi
      
    - name: Push to JFrog Artifactory
      id: push-jfrog-artifactory
      run: docker push ${{ steps.env.outputs.REGISTRY_IMAGE_PATH }}:${{ github.event.inputs.REGISTRY_REPOS_TAG_VERSION }}
    
    - name: Push to JFrog Artifactory result
      id: push-jfrog-artifactory-result
      if: always() && (steps.push-jfrog-artifactory.outcome != 'skipped')
      run: |
        if [[ '${{ steps.push-jfrog-artifactory.outcome }}' == 'success' ]]
          then 
            echo 'Push docker image to jfrog artifactory success.'
            echo 'The address of jfrog artifactory image is: ${{ steps.env.outputs.REGISTRY_IMAGE_PATH }}/${{ github.event.inputs.REGISTRY_REPOS_TAG_VERSION }}'
            echo 'Next step will deploy jfrog artifactory image to openshift'
            echo "::set-output name=REGISTRY_URL::${{ steps.env.outputs.REGISTRY_URL }}"
            echo "::set-output name=REGISTRY_REPOSITORY::${{ steps.env.outputs.REGISTRY_REPOSITORY }}"
            echo "::set-output name=REGISTRY_REPOS_TAG_NAME::${{ steps.env.outputs.REGISTRY_REPOS_TAG_NAME }}"
            echo "::set-output name=REGISTRY_REPOS_TAG_VERSION::${{ github.event.inputs.REGISTRY_REPOS_TAG_VERSION }}"
            imageTagPath=${{ steps.env.outputs.REGISTRY_IMAGE_PATH }}:${{ github.event.inputs.REGISTRY_REPOS_TAG_VERSION }};
            echo ::set-output name=imageResult::$(docker images -q $imageTagPath 2> /dev/null)
          else 
            echo 'Push docker image to jfrog artifactory failure.'
        fi
      
    - name: Remove Docker temp image
      id: remove-docker-temp-image
      if: steps.push-jfrog-artifactory-result.outputs.REGISTRY_URL != null
        && steps.push-jfrog-artifactory-result.outputs.REGISTRY_URL != ''
        && steps.push-jfrog-artifactory-result.outputs.REGISTRY_REPOSITORY!=null 
        && steps.push-jfrog-artifactory-result.outputs.REGISTRY_REPOSITORY!='' 
        && steps.push-jfrog-artifactory-result.outputs.REGISTRY_REPOS_TAG_NAME!=null 
        && steps.push-jfrog-artifactory-result.outputs.REGISTRY_REPOS_TAG_NAME!='' 
        && steps.push-jfrog-artifactory-result.outputs.REGISTRY_REPOS_TAG_VERSION!=null
        && steps.push-jfrog-artifactory-result.outputs.REGISTRY_REPOS_TAG_VERSION!=''
        && steps.push-jfrog-artifactory-result.outputs.imageResult!=null
        && steps.push-jfrog-artifactory-result.outputs.imageResult!=''
      run: docker rmi ${{ steps.push-jfrog-artifactory-result.outputs.REGISTRY_URL }}/${{ steps.push-jfrog-artifactory-result.outputs.REGISTRY_REPOSITORY }}/${{ steps.push-jfrog-artifactory-result.outputs.REGISTRY_REPOS_TAG_NAME }}:${{ steps.push-jfrog-artifactory-result.outputs.REGISTRY_REPOS_TAG_VERSION }}
        
    - name: Remove Docker temp image result
      if: always() && (steps.remove-docker-temp-image.outcome != 'skipped')
      run: |
        if [[ '${{ steps.remove-docker-temp-image.outcome }}' == 'success' ]]
          then 
            echo 'Remove docker temp image success.'
          else 
            echo 'Remove docker temp image failure.'
        fi
