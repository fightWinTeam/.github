name: pull-image-openshift-helm

on:
  workflow_dispatch:
    inputs:
      OPENSHIFT_TOKEN:
        description: "openshift token"
        required: true
        type: string
      OPENSHIFT_APP_NAME:
        description: "openshift application name"
        required: true
        type: string
      REGISTRY_REPOS_TAG_VERSION:
        description: "registry tag version"
        required: true
        type: string
      OPENSHIFT_NAMESPACE:
        description: "openshift namespace"
        required: true
        type: string
        default: idf-corp-vs-dev-1

  workflow_call:
    inputs:
      OPENSHIFT_TOKEN:
        description: "openshift token"
        required: true
        type: string
      OPENSHIFT_APP_NAME:
        description: "openshift application name"
        required: true
        type: string
      REGISTRY_REPOS_TAG_VERSION:
        description: "registry tag version"
        required: true
        type: string
      OPENSHIFT_NAMESPACE:
        description: "openshift namespace"
        required: true
        type: string

jobs:
  pull-image-openshift-job:
    runs-on: [self-hosted]

    steps:
    
      - name: uppercase
        id: uppercase
        run: |
          GITHUB_USER_ACCOUNT=$(echo $GITHUB_ACTOR | tr '[a-z]' '[A-Z]')
          echo "::set-output name=uppercase_account::$(echo $GITHUB_USER_ACCOUNT)"
          
      - name: run outputs
        id: env
        run: |
          # The file owner has read, write, and execute permissions.The owner's group and other users have read-only permission.
          chmod 744 ${{ github.workspace }}/${{ steps.uppercase.outputs.uppercase_account }}/.github/script/run.sh
          ${{ github.workspace }}/${{ steps.uppercase.outputs.uppercase_account }}/.github/script/run.sh ${{ github.workspace }}/${{ steps.uppercase.outputs.uppercase_account }} pull-image-openshift
        shell: bash
      
      - name: Login OpenShift
        id: pull-login-openshift
        run: oc login --token=${{ github.event.inputs.OPENSHIFT_TOKEN }} --server=${{ steps.env.outputs.OPENSHIFT_SERVER }}
        
      - name: Login OpenShift result
        if: always()
        run: |
          if [[ '${{ steps.pull-login-openshift.outcome }}' == 'success' ]]
            then 
              echo 'Login OpenShift success.'
            else 
              echo 'Login OpenShift failure.'
          fi
          
      - name: create APP
        id: pull-create-openshift-application
        run: |
          cd ${{ steps.uppercase.outputs.uppercase_account }}
          pwd
          echo "---" ${{ steps.env.outputs.RELEASE_NAME }} "---"
          helm upgrade --install ${{ steps.env.outputs.RELEASE_NAME }} Helmdeploy \
          --set tagVersion=${{ github.event.inputs.REGISTRY_REPOS_TAG_VERSION }},\
          openshiftAppName=${{ github.event.inputs.OPENSHIFT_APP_NAME }},\
          releaseName=${{ steps.env.outputs.RELEASE_NAME }},\
          namespace=${{ github.event.inputs.OPENSHIFT_NAMESPACE }},\
          routeHost=${{ steps.env.outputs.ROUTE_HOST }},\
          imageId=${{ steps.env.outputs.REGISTRY_IMAGE_PATH }}:${{ github.event.inputs.REGISTRY_REPOS_TAG_VERSION }} --force
        
      - name: create APP result
        if: always() && (steps.pull-create-openshift-application.outcome != 'skipped')
        run: |
          if [[ '${{ steps.pull-create-openshift-application.outcome }}' == 'success' ]]
            then 
              echo 'OpenShift create application step success.'
              oc get deployment/${{ github.event.inputs.OPENSHIFT_APP_NAME }}
            else 
              echo 'OpenShift create application step failure.'
          fi
      
      - name: create PVC
        id: pull-create-pvc
        run: oc apply -f ${{ steps.env.outputs.USER_WORK_SPACE_PATH }}/${{ steps.env.outputs.PVC_TEMPLATE_PATH }}
        
      - name: create PVC result
        if: always() && (steps.pull-create-pvc.outcome != 'skipped')
        run: |
          if [[ '${{ steps.pull-create-pvc.outcome }}' == 'success' ]]
            then 
              echo 'Create PVC step success.'
            else 
              echo 'Create PVC step failure.'
          fi
        
      - name: bound PVC
        id: pull-bound-pvc
        run: |
          pvcDetail=$(oc get pvc ${{ steps.env.outputs.PVC_CLAIM_NAME }})
          if [[ pvcDetail != '' ]]
            then
              oc set volumes deployment/${{ github.event.inputs.OPENSHIFT_APP_NAME }} --add --mount-path=${{ steps.env.outputs.PV_LOG_MOUNT_PATH }} -t pvc --claim-name=${{ steps.env.outputs.PVC_CLAIM_NAME }}
          fi
          
      - name: bound PVC result
        if: always() && (steps.pull-bound-pvc.outcome != 'skipped')
        run: |
          if [[ '${{ steps.pull-bound-pvc.outcome }}' == 'success' ]]
            then 
              echo 'Openshift application bound PVC step success.'
              oc set volumes deployment/${{ github.event.inputs.OPENSHIFT_APP_NAME }}
              echo "All services should be up and running now."
              echo "Exposing artifactory route to outside."
              echo "Helloworld artifactory is up and running."
              echo "Access Helloworld by follow url:"
              oc get route ${{ github.event.inputs.OPENSHIFT_APP_NAME }}
            else 
              echo 'Openshift application bound PVC step failure.'
          fi
